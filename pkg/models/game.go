package models

import (
	"gorm.io/gorm"
	"time"
)

type GameHistory struct {
	gorm.Model
	RequestID           string     // request id generated by chain link VRF
	PlayerDiscordUserId string     // discord user id
	RandomNumber        int64      // random number
	Choice              int        // choice 0 even | 1 odd
	GameResult          bool       // game result
	GameStatus          int        // game status
	BetValue            int64      // bet value gwei
	FinishTime          *time.Time // bet finished time 用指针可以传nil
	ServerId            string     // discord server id
	RequestRandomTxId   string     // tx id
	MainBetTxId         string     // tx id
}

type GameHistoryBo struct {
	PlayerDiscordUserId string `validate:"required"`
	Choice              uint8  `validate:"required, gt=0, lt=2"`
	BetValue            int64  `validate:"required, gt=0"`
	ServerId            string `validate:"required"`
}

type GameHistoryRepository interface {
	CreateGame(gh *GameHistory, db *gorm.DB) error
	UpdateRequestIdByTxId(txId string, requestID string, db *gorm.DB) error
	GetGameHistoryByRequestId(requestId string, db *gorm.DB) (*GameHistory, error)
	UpdateGameAfterMainBet(game *GameHistory, db *gorm.DB) error
}

type GameHistoryUsecase interface {
	CreateGame(bo GameHistoryBo) error
	UpdateRequestIdByTxId(txId string, requestID string) error
	GetGameHistoryByRequestId(requestId string) (*GameHistory, error)
	UpdateGameAfterMainBet(game *GameHistory) error
}
