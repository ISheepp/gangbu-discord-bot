// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: proto/withdraw/withdraw.proto

package withdraw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WithdrawRequestClient is the client API for WithdrawRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawRequestClient interface {
	// 根据discordId和钱包地址来提现
	Withdraw(ctx context.Context, in *WithdrawBo, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type withdrawRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawRequestClient(cc grpc.ClientConnInterface) WithdrawRequestClient {
	return &withdrawRequestClient{cc}
}

func (c *withdrawRequestClient) Withdraw(ctx context.Context, in *WithdrawBo, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/proto.WithdrawRequest/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawRequestServer is the server API for WithdrawRequest service.
// All implementations must embed UnimplementedWithdrawRequestServer
// for forward compatibility
type WithdrawRequestServer interface {
	// 根据discordId和钱包地址来提现
	Withdraw(context.Context, *WithdrawBo) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedWithdrawRequestServer()
}

// UnimplementedWithdrawRequestServer must be embedded to have forward compatible implementations.
type UnimplementedWithdrawRequestServer struct {
}

func (UnimplementedWithdrawRequestServer) Withdraw(context.Context, *WithdrawBo) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedWithdrawRequestServer) mustEmbedUnimplementedWithdrawRequestServer() {}

// UnsafeWithdrawRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawRequestServer will
// result in compilation errors.
type UnsafeWithdrawRequestServer interface {
	mustEmbedUnimplementedWithdrawRequestServer()
}

func RegisterWithdrawRequestServer(s grpc.ServiceRegistrar, srv WithdrawRequestServer) {
	s.RegisterService(&WithdrawRequest_ServiceDesc, srv)
}

func _WithdrawRequest_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawBo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawRequestServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WithdrawRequest/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawRequestServer).Withdraw(ctx, req.(*WithdrawBo))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawRequest_ServiceDesc is the grpc.ServiceDesc for WithdrawRequest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawRequest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WithdrawRequest",
	HandlerType: (*WithdrawRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Withdraw",
			Handler:    _WithdrawRequest_Withdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/withdraw/withdraw.proto",
}
